// <auto-generated />
using System;
using GymManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagementSystem.Data.Migrations
{
    [DbContext(typeof(GymManagementDbContext))]
    [Migration("20240423001849_AddedSeeding")]
    partial class AddedSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GymManagementSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("FirstNameTest");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("LastNameTest");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.AttendanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckInDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecords");
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.GymEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastMaintenanceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("GymEquipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = 0,
                            Description = "A weight training equipment used for squats.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3601),
                            Name = "Squat Rack"
                        },
                        new
                        {
                            Id = 2,
                            Availability = 0,
                            Description = "A piece of weight training equipment used for various exercises including bench presses.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3607),
                            Name = "Weight Bench"
                        },
                        new
                        {
                            Id = 3,
                            Availability = 0,
                            Description = "A machine used for the lat pulldown exercise targeting the upper back muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3608),
                            Name = "Lat Pulldown Machine"
                        },
                        new
                        {
                            Id = 4,
                            Availability = 0,
                            Description = "A machine used for the chest press exercise targeting the chest muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3610),
                            Name = "Chest Press Machine"
                        },
                        new
                        {
                            Id = 5,
                            Availability = 0,
                            Description = "A machine used for the chest fly exercise targeting the chest muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3611),
                            Name = "Chest Fly Machine"
                        },
                        new
                        {
                            Id = 6,
                            Availability = 0,
                            Description = "A machine used for the shoulder press exercise targeting the shoulder muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3616),
                            Name = "Shoulder Press Machine"
                        },
                        new
                        {
                            Id = 7,
                            Availability = 0,
                            Description = "A machine used for the cable row exercise targeting the back muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3617),
                            Name = "Cable Row Machine"
                        },
                        new
                        {
                            Id = 8,
                            Availability = 0,
                            Description = "A bench designed for performing biceps curls.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3619),
                            Name = "Biceps Curl Bench"
                        },
                        new
                        {
                            Id = 9,
                            Availability = 0,
                            Description = "A machine used for the leg press exercise targeting the leg muscles.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3621),
                            Name = "Leg Press Machine"
                        },
                        new
                        {
                            Id = 10,
                            Availability = 0,
                            Description = "A versatile machine with cable pulleys for various exercises.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3623),
                            Name = "Cable Tower"
                        },
                        new
                        {
                            Id = 11,
                            Availability = 0,
                            Description = "A weight training machine with a barbell fixed within steel rails.",
                            LastMaintenanceDate = new DateTime(2024, 4, 23, 0, 18, 49, 212, DateTimeKind.Utc).AddTicks(3625),
                            Name = "Smith Machine"
                        });
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.GymMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("GymEquipmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LockerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MembershipEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MembershipPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MembershipStatus")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GymEquipmentId");

                    b.HasIndex("LockerId");

                    b.HasIndex("MembershipPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("GymMembers");
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.Locker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LockerAvailability")
                        .HasColumnType("int");

                    b.Property<int>("LockerNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lockers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0968d739-9c3d-46b1-bd8c-2470444d8950"),
                            LockerAvailability = 0,
                            LockerNumber = 1
                        },
                        new
                        {
                            Id = new Guid("d554ab9d-25df-4579-a4ad-8e7c133a314c"),
                            LockerAvailability = 0,
                            LockerNumber = 2
                        },
                        new
                        {
                            Id = new Guid("0c053f06-5b61-4bba-bb97-4485cc4b975c"),
                            LockerAvailability = 0,
                            LockerNumber = 3
                        },
                        new
                        {
                            Id = new Guid("8d705de6-1aa7-43f1-b5a7-37302f412cb6"),
                            LockerAvailability = 0,
                            LockerNumber = 4
                        },
                        new
                        {
                            Id = new Guid("8c96ce82-d1f1-41bf-a16c-aefff92de011"),
                            LockerAvailability = 0,
                            LockerNumber = 5
                        },
                        new
                        {
                            Id = new Guid("d754a7e8-39f1-429e-9784-55e24a66d56c"),
                            LockerAvailability = 0,
                            LockerNumber = 6
                        },
                        new
                        {
                            Id = new Guid("da7b5918-4587-40b7-82a9-0efdb3105a94"),
                            LockerAvailability = 0,
                            LockerNumber = 7
                        },
                        new
                        {
                            Id = new Guid("9a18e20d-920e-4583-a58c-90510823e8bc"),
                            LockerAvailability = 0,
                            LockerNumber = 8
                        },
                        new
                        {
                            Id = new Guid("b626d899-c684-47d0-9fda-f90cd012a7af"),
                            LockerAvailability = 0,
                            LockerNumber = 9
                        },
                        new
                        {
                            Id = new Guid("80b957be-fa27-441c-8013-0768fe3e8392"),
                            LockerAvailability = 0,
                            LockerNumber = 10
                        },
                        new
                        {
                            Id = new Guid("b7c42c16-80c5-4f18-8b72-1d0ad25edcb2"),
                            LockerAvailability = 0,
                            LockerNumber = 11
                        },
                        new
                        {
                            Id = new Guid("ec48d862-c1f3-41bb-8c0e-aec520e3c72e"),
                            LockerAvailability = 0,
                            LockerNumber = 12
                        },
                        new
                        {
                            Id = new Guid("76915a22-1f30-4896-a45c-fbb4c1ced425"),
                            LockerAvailability = 0,
                            LockerNumber = 13
                        },
                        new
                        {
                            Id = new Guid("618ab511-1ab5-4e10-a1f1-7643f187b253"),
                            LockerAvailability = 0,
                            LockerNumber = 14
                        },
                        new
                        {
                            Id = new Guid("e5f18ef4-11c1-4bca-bc0e-68c7895107e8"),
                            LockerAvailability = 0,
                            LockerNumber = 15
                        },
                        new
                        {
                            Id = new Guid("c7a59375-0a4f-4120-99d2-8d007f7bf758"),
                            LockerAvailability = 0,
                            LockerNumber = 16
                        },
                        new
                        {
                            Id = new Guid("33bbe74a-52cc-4847-a92b-37df8efa0cd7"),
                            LockerAvailability = 0,
                            LockerNumber = 17
                        },
                        new
                        {
                            Id = new Guid("1b081b43-1e67-4e13-aaf2-4238a816c5e2"),
                            LockerAvailability = 0,
                            LockerNumber = 18
                        },
                        new
                        {
                            Id = new Guid("7e865010-b199-436e-92fb-0cd26401eef7"),
                            LockerAvailability = 0,
                            LockerNumber = 19
                        },
                        new
                        {
                            Id = new Guid("f251df7e-8d7c-455a-9013-9810be984882"),
                            LockerAvailability = 0,
                            LockerNumber = 20
                        },
                        new
                        {
                            Id = new Guid("b137ebf1-33a8-4779-8739-eb9563c8c3a8"),
                            LockerAvailability = 0,
                            LockerNumber = 21
                        },
                        new
                        {
                            Id = new Guid("51261585-d557-44b4-ad8b-0edb2d3a468a"),
                            LockerAvailability = 0,
                            LockerNumber = 22
                        },
                        new
                        {
                            Id = new Guid("2a7702ed-56fa-44c4-84eb-f39a81fe1e09"),
                            LockerAvailability = 0,
                            LockerNumber = 23
                        },
                        new
                        {
                            Id = new Guid("730f08a6-d253-4f47-9589-734e9deebbce"),
                            LockerAvailability = 0,
                            LockerNumber = 24
                        },
                        new
                        {
                            Id = new Guid("64799168-f3f4-430a-9e90-418f18be92d2"),
                            LockerAvailability = 0,
                            LockerNumber = 25
                        },
                        new
                        {
                            Id = new Guid("c68b7406-df1e-491e-8932-440773c3aa81"),
                            LockerAvailability = 0,
                            LockerNumber = 26
                        },
                        new
                        {
                            Id = new Guid("779b87cd-a54b-44ec-94dd-1d7897b141b7"),
                            LockerAvailability = 0,
                            LockerNumber = 27
                        },
                        new
                        {
                            Id = new Guid("87d02bd3-cf1e-4341-90d6-ba9ec3a8ca4d"),
                            LockerAvailability = 0,
                            LockerNumber = 28
                        },
                        new
                        {
                            Id = new Guid("41323e67-84ca-406d-9c1b-97890ceaf087"),
                            LockerAvailability = 0,
                            LockerNumber = 29
                        },
                        new
                        {
                            Id = new Guid("66b6fb81-0cfa-40f3-94d4-48e2e786f515"),
                            LockerAvailability = 0,
                            LockerNumber = 30
                        },
                        new
                        {
                            Id = new Guid("1b637f53-d552-4a0b-8e50-27ccf21bc146"),
                            LockerAvailability = 0,
                            LockerNumber = 31
                        },
                        new
                        {
                            Id = new Guid("debc5540-7773-4e16-9683-a51c50e98a16"),
                            LockerAvailability = 0,
                            LockerNumber = 32
                        },
                        new
                        {
                            Id = new Guid("345e6338-17d5-47b3-acc0-8e7ac557d384"),
                            LockerAvailability = 0,
                            LockerNumber = 33
                        },
                        new
                        {
                            Id = new Guid("eb97ffad-eaf8-4f5a-bbb0-015702082463"),
                            LockerAvailability = 0,
                            LockerNumber = 34
                        },
                        new
                        {
                            Id = new Guid("49d835f7-2613-48af-b592-5805300ca61b"),
                            LockerAvailability = 0,
                            LockerNumber = 35
                        },
                        new
                        {
                            Id = new Guid("8d2dc698-d895-4659-918b-c3b2997c9e03"),
                            LockerAvailability = 0,
                            LockerNumber = 36
                        },
                        new
                        {
                            Id = new Guid("b684b7fc-077b-43d1-ba38-90ea7bc9dc2c"),
                            LockerAvailability = 0,
                            LockerNumber = 37
                        },
                        new
                        {
                            Id = new Guid("5f8cfce4-13f9-4972-86b5-198042e53ee7"),
                            LockerAvailability = 0,
                            LockerNumber = 38
                        },
                        new
                        {
                            Id = new Guid("ae12195d-32a5-448d-bf35-17a5c63dbfc3"),
                            LockerAvailability = 0,
                            LockerNumber = 39
                        },
                        new
                        {
                            Id = new Guid("28207c26-f473-4b48-8cda-c2d77ae2a9f1"),
                            LockerAvailability = 0,
                            LockerNumber = 40
                        });
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.MembershipPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MembershipPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "One workout only.",
                            Name = "Pay-as-You-Go",
                            Price = 10m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Standard Monthly Membership. You can go to the gym anytime trough the month you paid for.",
                            Name = "Standard Monthly Membership",
                            Price = 60m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Student Monthly Membership. You can go to the gym anytime trough the month you paid for. You're using a 30% discount off the price",
                            Name = "Student Monthly Membership",
                            Price = 42m
                        });
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.StaffMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StaffMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.AttendanceRecord", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.GymMember", "User")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.GymMember", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.GymEquipment", "UsedGymEquipment")
                        .WithMany()
                        .HasForeignKey("GymEquipmentId");

                    b.HasOne("GymManagementSystem.Data.Models.Locker", "Locker")
                        .WithMany()
                        .HasForeignKey("LockerId");

                    b.HasOne("GymManagementSystem.Data.Models.MembershipPlan", "MembershipPlan")
                        .WithMany()
                        .HasForeignKey("MembershipPlanId");

                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locker");

                    b.Navigation("MembershipPlan");

                    b.Navigation("UsedGymEquipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.StaffMember", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymManagementSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementSystem.Data.Models.GymMember", b =>
                {
                    b.Navigation("AttendanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
